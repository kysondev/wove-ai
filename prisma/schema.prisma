generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(cuid())
  email            String        @unique
  name             String?
  emailVerified    Boolean       @default(false)
  image            String?
  role             ROLE          @default(user)
  createdAt        DateTime
  updatedAt        DateTime
  sessions         Session[]
  accounts         Account[]
  twoFactorEnabled Boolean?
  banned           Boolean?
  banReason        String?
  banExpires       DateTime?
  twofactors       TwoFactor[]
  chatSessions     ChatSession[]

  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model TwoFactor {
  id          String @id
  secret      String
  backupCodes String
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("twoFactor")
}

model ChatSession {
  id         String        @id @default(cuid())
  title      String        @default("New Chat")
  userId     String
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   ChatMessage[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  isArchived Boolean       @default(false)
  isFavorite Boolean       @default(false)
  tags       String[]      @default([])

  @@index([userId])
  @@index([createdAt])
  @@map("chat_session")
}

model ChatMessage {
  id        String      @id @default(cuid())
  content   String
  type      MessageType
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  imageUrl  String?
  metadata  Json?
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  isEdited  Boolean     @default(false)
  editedAt  DateTime?

  @@index([sessionId])
  @@index([createdAt])
  @@index([type])
  @@map("chat_message")
}

enum MessageType {
  user
  assistant
  system
}

enum ROLE {
  user
  admin
}
